# Makefile.in generated by automake 1.11.1 from Makefile.am.
# mert/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/moses
pkgincludedir = $(includedir)/moses
pkglibdir = $(libdir)/moses
pkglibexecdir = $(libexecdir)/moses
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = mert$(EXEEXT) extractor$(EXEEXT)
subdir = mert
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_boost_base.m4 \
	$(top_srcdir)/m4/ax_boost_thread.m4 \
	$(top_srcdir)/m4/ax_xmlrpc_c.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_extractor_OBJECTS = extractor-Util.$(OBJEXT) \
	extractor-Timer.$(OBJEXT) extractor-ScoreStats.$(OBJEXT) \
	extractor-ScoreArray.$(OBJEXT) extractor-ScoreData.$(OBJEXT) \
	extractor-FeatureStats.$(OBJEXT) \
	extractor-FeatureArray.$(OBJEXT) \
	extractor-FeatureData.$(OBJEXT) extractor-Data.$(OBJEXT) \
	extractor-BleuScorer.$(OBJEXT) extractor-Point.$(OBJEXT) \
	extractor-PerScorer.$(OBJEXT) extractor-Scorer.$(OBJEXT) \
	extractor-Optimizer.$(OBJEXT) extractor-extractor.$(OBJEXT)
extractor_OBJECTS = $(am_extractor_OBJECTS)
extractor_DEPENDENCIES =
am_mert_OBJECTS = mert-Util.$(OBJEXT) mert-Timer.$(OBJEXT) \
	mert-ScoreStats.$(OBJEXT) mert-ScoreArray.$(OBJEXT) \
	mert-ScoreData.$(OBJEXT) mert-FeatureStats.$(OBJEXT) \
	mert-FeatureArray.$(OBJEXT) mert-FeatureData.$(OBJEXT) \
	mert-Data.$(OBJEXT) mert-BleuScorer.$(OBJEXT) \
	mert-Point.$(OBJEXT) mert-PerScorer.$(OBJEXT) \
	mert-Scorer.$(OBJEXT) mert-Optimizer.$(OBJEXT) \
	mert-mert.$(OBJEXT)
mert_OBJECTS = $(am_mert_OBJECTS)
mert_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(extractor_SOURCES) $(mert_SOURCES)
DIST_SOURCES = $(extractor_SOURCES) $(mert_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run autoconf
AUTOHEADER = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run autoheader
AUTOMAKE = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run automake-1.11
AWK = gawk
BOOST_CPPFLAGS = 
BOOST_LDFLAGS = 
BOOST_THREAD_LIB = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -DTRACE_ENABLE=1 -I/home/toshiba/Bureau/tools/srilm/include -I/home/toshiba/Bureau/tools/irstlm/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDFLAGS =  -L/home/toshiba/Bureau/tools/srilm/lib/i686 -L/home/toshiba/Bureau/tools/srilm/flm/obj/i686 -L/home/toshiba/Bureau/tools/irstlm/lib/i686
LIBOBJS = 
LIBS = -loolm  -loolm -ldstruct -lmisc -lflm -lirstlm -lz
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/toshiba/Bureau/tools/moses/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = moses
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PROTOC = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 0.1
XMLRPC_C_CPPFLAGS = 
XMLRPC_C_LIBS = 
abs_builddir = /home/toshiba/Bureau/tools/moses/mert
abs_srcdir = /home/toshiba/Bureau/tools/moses/mert
abs_top_builddir = /home/toshiba/Bureau/tools/moses
abs_top_srcdir = /home/toshiba/Bureau/tools/moses
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/toshiba/Bureau/tools/moses/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
mert_SOURCES = Util.cpp \
     Timer.cpp \
ScoreStats.cpp ScoreArray.cpp ScoreData.cpp \
FeatureStats.cpp FeatureArray.cpp FeatureData.cpp \
Data.cpp \
BleuScorer.cpp \
Point.cpp \
PerScorer.cpp \
Scorer.cpp \
Optimizer.cpp \
mert.cpp

extractor_SOURCES = Util.cpp \
     Timer.cpp \
ScoreStats.cpp ScoreArray.cpp ScoreData.cpp \
FeatureStats.cpp FeatureArray.cpp FeatureData.cpp \
Data.cpp \
BleuScorer.cpp \
Point.cpp \
PerScorer.cpp \
Scorer.cpp \
Optimizer.cpp \
extractor.cpp

mert_CPPFLAGS = -W -Wall -Wno-unused -ffor-scope -DTRACE_ENABLE
extractor_CPPFLAGS = -W -Wall -Wno-unused -ffor-scope -DTRACE_ENABLE
extractor_LDADD = -lm -lz
mert_LDADD = -lm -lz
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu mert/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu mert/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
extractor$(EXEEXT): $(extractor_OBJECTS) $(extractor_DEPENDENCIES) 
	@rm -f extractor$(EXEEXT)
	$(CXXLINK) $(extractor_OBJECTS) $(extractor_LDADD) $(LIBS)
mert$(EXEEXT): $(mert_OBJECTS) $(mert_DEPENDENCIES) 
	@rm -f mert$(EXEEXT)
	$(CXXLINK) $(mert_OBJECTS) $(mert_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/extractor-BleuScorer.Po
include ./$(DEPDIR)/extractor-Data.Po
include ./$(DEPDIR)/extractor-FeatureArray.Po
include ./$(DEPDIR)/extractor-FeatureData.Po
include ./$(DEPDIR)/extractor-FeatureStats.Po
include ./$(DEPDIR)/extractor-Optimizer.Po
include ./$(DEPDIR)/extractor-PerScorer.Po
include ./$(DEPDIR)/extractor-Point.Po
include ./$(DEPDIR)/extractor-ScoreArray.Po
include ./$(DEPDIR)/extractor-ScoreData.Po
include ./$(DEPDIR)/extractor-ScoreStats.Po
include ./$(DEPDIR)/extractor-Scorer.Po
include ./$(DEPDIR)/extractor-Timer.Po
include ./$(DEPDIR)/extractor-Util.Po
include ./$(DEPDIR)/extractor-extractor.Po
include ./$(DEPDIR)/mert-BleuScorer.Po
include ./$(DEPDIR)/mert-Data.Po
include ./$(DEPDIR)/mert-FeatureArray.Po
include ./$(DEPDIR)/mert-FeatureData.Po
include ./$(DEPDIR)/mert-FeatureStats.Po
include ./$(DEPDIR)/mert-Optimizer.Po
include ./$(DEPDIR)/mert-PerScorer.Po
include ./$(DEPDIR)/mert-Point.Po
include ./$(DEPDIR)/mert-ScoreArray.Po
include ./$(DEPDIR)/mert-ScoreData.Po
include ./$(DEPDIR)/mert-ScoreStats.Po
include ./$(DEPDIR)/mert-Scorer.Po
include ./$(DEPDIR)/mert-Timer.Po
include ./$(DEPDIR)/mert-Util.Po
include ./$(DEPDIR)/mert-mert.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

extractor-Util.o: Util.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Util.o -MD -MP -MF $(DEPDIR)/extractor-Util.Tpo -c -o extractor-Util.o `test -f 'Util.cpp' || echo '$(srcdir)/'`Util.cpp
	$(am__mv) $(DEPDIR)/extractor-Util.Tpo $(DEPDIR)/extractor-Util.Po
#	source='Util.cpp' object='extractor-Util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Util.o `test -f 'Util.cpp' || echo '$(srcdir)/'`Util.cpp

extractor-Util.obj: Util.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Util.obj -MD -MP -MF $(DEPDIR)/extractor-Util.Tpo -c -o extractor-Util.obj `if test -f 'Util.cpp'; then $(CYGPATH_W) 'Util.cpp'; else $(CYGPATH_W) '$(srcdir)/Util.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Util.Tpo $(DEPDIR)/extractor-Util.Po
#	source='Util.cpp' object='extractor-Util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Util.obj `if test -f 'Util.cpp'; then $(CYGPATH_W) 'Util.cpp'; else $(CYGPATH_W) '$(srcdir)/Util.cpp'; fi`

extractor-Timer.o: Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Timer.o -MD -MP -MF $(DEPDIR)/extractor-Timer.Tpo -c -o extractor-Timer.o `test -f 'Timer.cpp' || echo '$(srcdir)/'`Timer.cpp
	$(am__mv) $(DEPDIR)/extractor-Timer.Tpo $(DEPDIR)/extractor-Timer.Po
#	source='Timer.cpp' object='extractor-Timer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Timer.o `test -f 'Timer.cpp' || echo '$(srcdir)/'`Timer.cpp

extractor-Timer.obj: Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Timer.obj -MD -MP -MF $(DEPDIR)/extractor-Timer.Tpo -c -o extractor-Timer.obj `if test -f 'Timer.cpp'; then $(CYGPATH_W) 'Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/Timer.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Timer.Tpo $(DEPDIR)/extractor-Timer.Po
#	source='Timer.cpp' object='extractor-Timer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Timer.obj `if test -f 'Timer.cpp'; then $(CYGPATH_W) 'Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/Timer.cpp'; fi`

extractor-ScoreStats.o: ScoreStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreStats.o -MD -MP -MF $(DEPDIR)/extractor-ScoreStats.Tpo -c -o extractor-ScoreStats.o `test -f 'ScoreStats.cpp' || echo '$(srcdir)/'`ScoreStats.cpp
	$(am__mv) $(DEPDIR)/extractor-ScoreStats.Tpo $(DEPDIR)/extractor-ScoreStats.Po
#	source='ScoreStats.cpp' object='extractor-ScoreStats.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreStats.o `test -f 'ScoreStats.cpp' || echo '$(srcdir)/'`ScoreStats.cpp

extractor-ScoreStats.obj: ScoreStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreStats.obj -MD -MP -MF $(DEPDIR)/extractor-ScoreStats.Tpo -c -o extractor-ScoreStats.obj `if test -f 'ScoreStats.cpp'; then $(CYGPATH_W) 'ScoreStats.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreStats.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-ScoreStats.Tpo $(DEPDIR)/extractor-ScoreStats.Po
#	source='ScoreStats.cpp' object='extractor-ScoreStats.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreStats.obj `if test -f 'ScoreStats.cpp'; then $(CYGPATH_W) 'ScoreStats.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreStats.cpp'; fi`

extractor-ScoreArray.o: ScoreArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreArray.o -MD -MP -MF $(DEPDIR)/extractor-ScoreArray.Tpo -c -o extractor-ScoreArray.o `test -f 'ScoreArray.cpp' || echo '$(srcdir)/'`ScoreArray.cpp
	$(am__mv) $(DEPDIR)/extractor-ScoreArray.Tpo $(DEPDIR)/extractor-ScoreArray.Po
#	source='ScoreArray.cpp' object='extractor-ScoreArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreArray.o `test -f 'ScoreArray.cpp' || echo '$(srcdir)/'`ScoreArray.cpp

extractor-ScoreArray.obj: ScoreArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreArray.obj -MD -MP -MF $(DEPDIR)/extractor-ScoreArray.Tpo -c -o extractor-ScoreArray.obj `if test -f 'ScoreArray.cpp'; then $(CYGPATH_W) 'ScoreArray.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreArray.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-ScoreArray.Tpo $(DEPDIR)/extractor-ScoreArray.Po
#	source='ScoreArray.cpp' object='extractor-ScoreArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreArray.obj `if test -f 'ScoreArray.cpp'; then $(CYGPATH_W) 'ScoreArray.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreArray.cpp'; fi`

extractor-ScoreData.o: ScoreData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreData.o -MD -MP -MF $(DEPDIR)/extractor-ScoreData.Tpo -c -o extractor-ScoreData.o `test -f 'ScoreData.cpp' || echo '$(srcdir)/'`ScoreData.cpp
	$(am__mv) $(DEPDIR)/extractor-ScoreData.Tpo $(DEPDIR)/extractor-ScoreData.Po
#	source='ScoreData.cpp' object='extractor-ScoreData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreData.o `test -f 'ScoreData.cpp' || echo '$(srcdir)/'`ScoreData.cpp

extractor-ScoreData.obj: ScoreData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-ScoreData.obj -MD -MP -MF $(DEPDIR)/extractor-ScoreData.Tpo -c -o extractor-ScoreData.obj `if test -f 'ScoreData.cpp'; then $(CYGPATH_W) 'ScoreData.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreData.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-ScoreData.Tpo $(DEPDIR)/extractor-ScoreData.Po
#	source='ScoreData.cpp' object='extractor-ScoreData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-ScoreData.obj `if test -f 'ScoreData.cpp'; then $(CYGPATH_W) 'ScoreData.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreData.cpp'; fi`

extractor-FeatureStats.o: FeatureStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureStats.o -MD -MP -MF $(DEPDIR)/extractor-FeatureStats.Tpo -c -o extractor-FeatureStats.o `test -f 'FeatureStats.cpp' || echo '$(srcdir)/'`FeatureStats.cpp
	$(am__mv) $(DEPDIR)/extractor-FeatureStats.Tpo $(DEPDIR)/extractor-FeatureStats.Po
#	source='FeatureStats.cpp' object='extractor-FeatureStats.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureStats.o `test -f 'FeatureStats.cpp' || echo '$(srcdir)/'`FeatureStats.cpp

extractor-FeatureStats.obj: FeatureStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureStats.obj -MD -MP -MF $(DEPDIR)/extractor-FeatureStats.Tpo -c -o extractor-FeatureStats.obj `if test -f 'FeatureStats.cpp'; then $(CYGPATH_W) 'FeatureStats.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureStats.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-FeatureStats.Tpo $(DEPDIR)/extractor-FeatureStats.Po
#	source='FeatureStats.cpp' object='extractor-FeatureStats.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureStats.obj `if test -f 'FeatureStats.cpp'; then $(CYGPATH_W) 'FeatureStats.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureStats.cpp'; fi`

extractor-FeatureArray.o: FeatureArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureArray.o -MD -MP -MF $(DEPDIR)/extractor-FeatureArray.Tpo -c -o extractor-FeatureArray.o `test -f 'FeatureArray.cpp' || echo '$(srcdir)/'`FeatureArray.cpp
	$(am__mv) $(DEPDIR)/extractor-FeatureArray.Tpo $(DEPDIR)/extractor-FeatureArray.Po
#	source='FeatureArray.cpp' object='extractor-FeatureArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureArray.o `test -f 'FeatureArray.cpp' || echo '$(srcdir)/'`FeatureArray.cpp

extractor-FeatureArray.obj: FeatureArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureArray.obj -MD -MP -MF $(DEPDIR)/extractor-FeatureArray.Tpo -c -o extractor-FeatureArray.obj `if test -f 'FeatureArray.cpp'; then $(CYGPATH_W) 'FeatureArray.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureArray.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-FeatureArray.Tpo $(DEPDIR)/extractor-FeatureArray.Po
#	source='FeatureArray.cpp' object='extractor-FeatureArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureArray.obj `if test -f 'FeatureArray.cpp'; then $(CYGPATH_W) 'FeatureArray.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureArray.cpp'; fi`

extractor-FeatureData.o: FeatureData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureData.o -MD -MP -MF $(DEPDIR)/extractor-FeatureData.Tpo -c -o extractor-FeatureData.o `test -f 'FeatureData.cpp' || echo '$(srcdir)/'`FeatureData.cpp
	$(am__mv) $(DEPDIR)/extractor-FeatureData.Tpo $(DEPDIR)/extractor-FeatureData.Po
#	source='FeatureData.cpp' object='extractor-FeatureData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureData.o `test -f 'FeatureData.cpp' || echo '$(srcdir)/'`FeatureData.cpp

extractor-FeatureData.obj: FeatureData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-FeatureData.obj -MD -MP -MF $(DEPDIR)/extractor-FeatureData.Tpo -c -o extractor-FeatureData.obj `if test -f 'FeatureData.cpp'; then $(CYGPATH_W) 'FeatureData.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureData.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-FeatureData.Tpo $(DEPDIR)/extractor-FeatureData.Po
#	source='FeatureData.cpp' object='extractor-FeatureData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-FeatureData.obj `if test -f 'FeatureData.cpp'; then $(CYGPATH_W) 'FeatureData.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureData.cpp'; fi`

extractor-Data.o: Data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Data.o -MD -MP -MF $(DEPDIR)/extractor-Data.Tpo -c -o extractor-Data.o `test -f 'Data.cpp' || echo '$(srcdir)/'`Data.cpp
	$(am__mv) $(DEPDIR)/extractor-Data.Tpo $(DEPDIR)/extractor-Data.Po
#	source='Data.cpp' object='extractor-Data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Data.o `test -f 'Data.cpp' || echo '$(srcdir)/'`Data.cpp

extractor-Data.obj: Data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Data.obj -MD -MP -MF $(DEPDIR)/extractor-Data.Tpo -c -o extractor-Data.obj `if test -f 'Data.cpp'; then $(CYGPATH_W) 'Data.cpp'; else $(CYGPATH_W) '$(srcdir)/Data.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Data.Tpo $(DEPDIR)/extractor-Data.Po
#	source='Data.cpp' object='extractor-Data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Data.obj `if test -f 'Data.cpp'; then $(CYGPATH_W) 'Data.cpp'; else $(CYGPATH_W) '$(srcdir)/Data.cpp'; fi`

extractor-BleuScorer.o: BleuScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-BleuScorer.o -MD -MP -MF $(DEPDIR)/extractor-BleuScorer.Tpo -c -o extractor-BleuScorer.o `test -f 'BleuScorer.cpp' || echo '$(srcdir)/'`BleuScorer.cpp
	$(am__mv) $(DEPDIR)/extractor-BleuScorer.Tpo $(DEPDIR)/extractor-BleuScorer.Po
#	source='BleuScorer.cpp' object='extractor-BleuScorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-BleuScorer.o `test -f 'BleuScorer.cpp' || echo '$(srcdir)/'`BleuScorer.cpp

extractor-BleuScorer.obj: BleuScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-BleuScorer.obj -MD -MP -MF $(DEPDIR)/extractor-BleuScorer.Tpo -c -o extractor-BleuScorer.obj `if test -f 'BleuScorer.cpp'; then $(CYGPATH_W) 'BleuScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/BleuScorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-BleuScorer.Tpo $(DEPDIR)/extractor-BleuScorer.Po
#	source='BleuScorer.cpp' object='extractor-BleuScorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-BleuScorer.obj `if test -f 'BleuScorer.cpp'; then $(CYGPATH_W) 'BleuScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/BleuScorer.cpp'; fi`

extractor-Point.o: Point.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Point.o -MD -MP -MF $(DEPDIR)/extractor-Point.Tpo -c -o extractor-Point.o `test -f 'Point.cpp' || echo '$(srcdir)/'`Point.cpp
	$(am__mv) $(DEPDIR)/extractor-Point.Tpo $(DEPDIR)/extractor-Point.Po
#	source='Point.cpp' object='extractor-Point.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Point.o `test -f 'Point.cpp' || echo '$(srcdir)/'`Point.cpp

extractor-Point.obj: Point.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Point.obj -MD -MP -MF $(DEPDIR)/extractor-Point.Tpo -c -o extractor-Point.obj `if test -f 'Point.cpp'; then $(CYGPATH_W) 'Point.cpp'; else $(CYGPATH_W) '$(srcdir)/Point.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Point.Tpo $(DEPDIR)/extractor-Point.Po
#	source='Point.cpp' object='extractor-Point.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Point.obj `if test -f 'Point.cpp'; then $(CYGPATH_W) 'Point.cpp'; else $(CYGPATH_W) '$(srcdir)/Point.cpp'; fi`

extractor-PerScorer.o: PerScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-PerScorer.o -MD -MP -MF $(DEPDIR)/extractor-PerScorer.Tpo -c -o extractor-PerScorer.o `test -f 'PerScorer.cpp' || echo '$(srcdir)/'`PerScorer.cpp
	$(am__mv) $(DEPDIR)/extractor-PerScorer.Tpo $(DEPDIR)/extractor-PerScorer.Po
#	source='PerScorer.cpp' object='extractor-PerScorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-PerScorer.o `test -f 'PerScorer.cpp' || echo '$(srcdir)/'`PerScorer.cpp

extractor-PerScorer.obj: PerScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-PerScorer.obj -MD -MP -MF $(DEPDIR)/extractor-PerScorer.Tpo -c -o extractor-PerScorer.obj `if test -f 'PerScorer.cpp'; then $(CYGPATH_W) 'PerScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/PerScorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-PerScorer.Tpo $(DEPDIR)/extractor-PerScorer.Po
#	source='PerScorer.cpp' object='extractor-PerScorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-PerScorer.obj `if test -f 'PerScorer.cpp'; then $(CYGPATH_W) 'PerScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/PerScorer.cpp'; fi`

extractor-Scorer.o: Scorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Scorer.o -MD -MP -MF $(DEPDIR)/extractor-Scorer.Tpo -c -o extractor-Scorer.o `test -f 'Scorer.cpp' || echo '$(srcdir)/'`Scorer.cpp
	$(am__mv) $(DEPDIR)/extractor-Scorer.Tpo $(DEPDIR)/extractor-Scorer.Po
#	source='Scorer.cpp' object='extractor-Scorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Scorer.o `test -f 'Scorer.cpp' || echo '$(srcdir)/'`Scorer.cpp

extractor-Scorer.obj: Scorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Scorer.obj -MD -MP -MF $(DEPDIR)/extractor-Scorer.Tpo -c -o extractor-Scorer.obj `if test -f 'Scorer.cpp'; then $(CYGPATH_W) 'Scorer.cpp'; else $(CYGPATH_W) '$(srcdir)/Scorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Scorer.Tpo $(DEPDIR)/extractor-Scorer.Po
#	source='Scorer.cpp' object='extractor-Scorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Scorer.obj `if test -f 'Scorer.cpp'; then $(CYGPATH_W) 'Scorer.cpp'; else $(CYGPATH_W) '$(srcdir)/Scorer.cpp'; fi`

extractor-Optimizer.o: Optimizer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Optimizer.o -MD -MP -MF $(DEPDIR)/extractor-Optimizer.Tpo -c -o extractor-Optimizer.o `test -f 'Optimizer.cpp' || echo '$(srcdir)/'`Optimizer.cpp
	$(am__mv) $(DEPDIR)/extractor-Optimizer.Tpo $(DEPDIR)/extractor-Optimizer.Po
#	source='Optimizer.cpp' object='extractor-Optimizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Optimizer.o `test -f 'Optimizer.cpp' || echo '$(srcdir)/'`Optimizer.cpp

extractor-Optimizer.obj: Optimizer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-Optimizer.obj -MD -MP -MF $(DEPDIR)/extractor-Optimizer.Tpo -c -o extractor-Optimizer.obj `if test -f 'Optimizer.cpp'; then $(CYGPATH_W) 'Optimizer.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimizer.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-Optimizer.Tpo $(DEPDIR)/extractor-Optimizer.Po
#	source='Optimizer.cpp' object='extractor-Optimizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-Optimizer.obj `if test -f 'Optimizer.cpp'; then $(CYGPATH_W) 'Optimizer.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimizer.cpp'; fi`

extractor-extractor.o: extractor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-extractor.o -MD -MP -MF $(DEPDIR)/extractor-extractor.Tpo -c -o extractor-extractor.o `test -f 'extractor.cpp' || echo '$(srcdir)/'`extractor.cpp
	$(am__mv) $(DEPDIR)/extractor-extractor.Tpo $(DEPDIR)/extractor-extractor.Po
#	source='extractor.cpp' object='extractor-extractor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-extractor.o `test -f 'extractor.cpp' || echo '$(srcdir)/'`extractor.cpp

extractor-extractor.obj: extractor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT extractor-extractor.obj -MD -MP -MF $(DEPDIR)/extractor-extractor.Tpo -c -o extractor-extractor.obj `if test -f 'extractor.cpp'; then $(CYGPATH_W) 'extractor.cpp'; else $(CYGPATH_W) '$(srcdir)/extractor.cpp'; fi`
	$(am__mv) $(DEPDIR)/extractor-extractor.Tpo $(DEPDIR)/extractor-extractor.Po
#	source='extractor.cpp' object='extractor-extractor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(extractor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extractor-extractor.obj `if test -f 'extractor.cpp'; then $(CYGPATH_W) 'extractor.cpp'; else $(CYGPATH_W) '$(srcdir)/extractor.cpp'; fi`

mert-Util.o: Util.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Util.o -MD -MP -MF $(DEPDIR)/mert-Util.Tpo -c -o mert-Util.o `test -f 'Util.cpp' || echo '$(srcdir)/'`Util.cpp
	$(am__mv) $(DEPDIR)/mert-Util.Tpo $(DEPDIR)/mert-Util.Po
#	source='Util.cpp' object='mert-Util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Util.o `test -f 'Util.cpp' || echo '$(srcdir)/'`Util.cpp

mert-Util.obj: Util.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Util.obj -MD -MP -MF $(DEPDIR)/mert-Util.Tpo -c -o mert-Util.obj `if test -f 'Util.cpp'; then $(CYGPATH_W) 'Util.cpp'; else $(CYGPATH_W) '$(srcdir)/Util.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Util.Tpo $(DEPDIR)/mert-Util.Po
#	source='Util.cpp' object='mert-Util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Util.obj `if test -f 'Util.cpp'; then $(CYGPATH_W) 'Util.cpp'; else $(CYGPATH_W) '$(srcdir)/Util.cpp'; fi`

mert-Timer.o: Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Timer.o -MD -MP -MF $(DEPDIR)/mert-Timer.Tpo -c -o mert-Timer.o `test -f 'Timer.cpp' || echo '$(srcdir)/'`Timer.cpp
	$(am__mv) $(DEPDIR)/mert-Timer.Tpo $(DEPDIR)/mert-Timer.Po
#	source='Timer.cpp' object='mert-Timer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Timer.o `test -f 'Timer.cpp' || echo '$(srcdir)/'`Timer.cpp

mert-Timer.obj: Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Timer.obj -MD -MP -MF $(DEPDIR)/mert-Timer.Tpo -c -o mert-Timer.obj `if test -f 'Timer.cpp'; then $(CYGPATH_W) 'Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/Timer.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Timer.Tpo $(DEPDIR)/mert-Timer.Po
#	source='Timer.cpp' object='mert-Timer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Timer.obj `if test -f 'Timer.cpp'; then $(CYGPATH_W) 'Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/Timer.cpp'; fi`

mert-ScoreStats.o: ScoreStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreStats.o -MD -MP -MF $(DEPDIR)/mert-ScoreStats.Tpo -c -o mert-ScoreStats.o `test -f 'ScoreStats.cpp' || echo '$(srcdir)/'`ScoreStats.cpp
	$(am__mv) $(DEPDIR)/mert-ScoreStats.Tpo $(DEPDIR)/mert-ScoreStats.Po
#	source='ScoreStats.cpp' object='mert-ScoreStats.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreStats.o `test -f 'ScoreStats.cpp' || echo '$(srcdir)/'`ScoreStats.cpp

mert-ScoreStats.obj: ScoreStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreStats.obj -MD -MP -MF $(DEPDIR)/mert-ScoreStats.Tpo -c -o mert-ScoreStats.obj `if test -f 'ScoreStats.cpp'; then $(CYGPATH_W) 'ScoreStats.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreStats.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-ScoreStats.Tpo $(DEPDIR)/mert-ScoreStats.Po
#	source='ScoreStats.cpp' object='mert-ScoreStats.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreStats.obj `if test -f 'ScoreStats.cpp'; then $(CYGPATH_W) 'ScoreStats.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreStats.cpp'; fi`

mert-ScoreArray.o: ScoreArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreArray.o -MD -MP -MF $(DEPDIR)/mert-ScoreArray.Tpo -c -o mert-ScoreArray.o `test -f 'ScoreArray.cpp' || echo '$(srcdir)/'`ScoreArray.cpp
	$(am__mv) $(DEPDIR)/mert-ScoreArray.Tpo $(DEPDIR)/mert-ScoreArray.Po
#	source='ScoreArray.cpp' object='mert-ScoreArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreArray.o `test -f 'ScoreArray.cpp' || echo '$(srcdir)/'`ScoreArray.cpp

mert-ScoreArray.obj: ScoreArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreArray.obj -MD -MP -MF $(DEPDIR)/mert-ScoreArray.Tpo -c -o mert-ScoreArray.obj `if test -f 'ScoreArray.cpp'; then $(CYGPATH_W) 'ScoreArray.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreArray.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-ScoreArray.Tpo $(DEPDIR)/mert-ScoreArray.Po
#	source='ScoreArray.cpp' object='mert-ScoreArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreArray.obj `if test -f 'ScoreArray.cpp'; then $(CYGPATH_W) 'ScoreArray.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreArray.cpp'; fi`

mert-ScoreData.o: ScoreData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreData.o -MD -MP -MF $(DEPDIR)/mert-ScoreData.Tpo -c -o mert-ScoreData.o `test -f 'ScoreData.cpp' || echo '$(srcdir)/'`ScoreData.cpp
	$(am__mv) $(DEPDIR)/mert-ScoreData.Tpo $(DEPDIR)/mert-ScoreData.Po
#	source='ScoreData.cpp' object='mert-ScoreData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreData.o `test -f 'ScoreData.cpp' || echo '$(srcdir)/'`ScoreData.cpp

mert-ScoreData.obj: ScoreData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-ScoreData.obj -MD -MP -MF $(DEPDIR)/mert-ScoreData.Tpo -c -o mert-ScoreData.obj `if test -f 'ScoreData.cpp'; then $(CYGPATH_W) 'ScoreData.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreData.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-ScoreData.Tpo $(DEPDIR)/mert-ScoreData.Po
#	source='ScoreData.cpp' object='mert-ScoreData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-ScoreData.obj `if test -f 'ScoreData.cpp'; then $(CYGPATH_W) 'ScoreData.cpp'; else $(CYGPATH_W) '$(srcdir)/ScoreData.cpp'; fi`

mert-FeatureStats.o: FeatureStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureStats.o -MD -MP -MF $(DEPDIR)/mert-FeatureStats.Tpo -c -o mert-FeatureStats.o `test -f 'FeatureStats.cpp' || echo '$(srcdir)/'`FeatureStats.cpp
	$(am__mv) $(DEPDIR)/mert-FeatureStats.Tpo $(DEPDIR)/mert-FeatureStats.Po
#	source='FeatureStats.cpp' object='mert-FeatureStats.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureStats.o `test -f 'FeatureStats.cpp' || echo '$(srcdir)/'`FeatureStats.cpp

mert-FeatureStats.obj: FeatureStats.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureStats.obj -MD -MP -MF $(DEPDIR)/mert-FeatureStats.Tpo -c -o mert-FeatureStats.obj `if test -f 'FeatureStats.cpp'; then $(CYGPATH_W) 'FeatureStats.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureStats.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-FeatureStats.Tpo $(DEPDIR)/mert-FeatureStats.Po
#	source='FeatureStats.cpp' object='mert-FeatureStats.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureStats.obj `if test -f 'FeatureStats.cpp'; then $(CYGPATH_W) 'FeatureStats.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureStats.cpp'; fi`

mert-FeatureArray.o: FeatureArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureArray.o -MD -MP -MF $(DEPDIR)/mert-FeatureArray.Tpo -c -o mert-FeatureArray.o `test -f 'FeatureArray.cpp' || echo '$(srcdir)/'`FeatureArray.cpp
	$(am__mv) $(DEPDIR)/mert-FeatureArray.Tpo $(DEPDIR)/mert-FeatureArray.Po
#	source='FeatureArray.cpp' object='mert-FeatureArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureArray.o `test -f 'FeatureArray.cpp' || echo '$(srcdir)/'`FeatureArray.cpp

mert-FeatureArray.obj: FeatureArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureArray.obj -MD -MP -MF $(DEPDIR)/mert-FeatureArray.Tpo -c -o mert-FeatureArray.obj `if test -f 'FeatureArray.cpp'; then $(CYGPATH_W) 'FeatureArray.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureArray.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-FeatureArray.Tpo $(DEPDIR)/mert-FeatureArray.Po
#	source='FeatureArray.cpp' object='mert-FeatureArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureArray.obj `if test -f 'FeatureArray.cpp'; then $(CYGPATH_W) 'FeatureArray.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureArray.cpp'; fi`

mert-FeatureData.o: FeatureData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureData.o -MD -MP -MF $(DEPDIR)/mert-FeatureData.Tpo -c -o mert-FeatureData.o `test -f 'FeatureData.cpp' || echo '$(srcdir)/'`FeatureData.cpp
	$(am__mv) $(DEPDIR)/mert-FeatureData.Tpo $(DEPDIR)/mert-FeatureData.Po
#	source='FeatureData.cpp' object='mert-FeatureData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureData.o `test -f 'FeatureData.cpp' || echo '$(srcdir)/'`FeatureData.cpp

mert-FeatureData.obj: FeatureData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-FeatureData.obj -MD -MP -MF $(DEPDIR)/mert-FeatureData.Tpo -c -o mert-FeatureData.obj `if test -f 'FeatureData.cpp'; then $(CYGPATH_W) 'FeatureData.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureData.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-FeatureData.Tpo $(DEPDIR)/mert-FeatureData.Po
#	source='FeatureData.cpp' object='mert-FeatureData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-FeatureData.obj `if test -f 'FeatureData.cpp'; then $(CYGPATH_W) 'FeatureData.cpp'; else $(CYGPATH_W) '$(srcdir)/FeatureData.cpp'; fi`

mert-Data.o: Data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Data.o -MD -MP -MF $(DEPDIR)/mert-Data.Tpo -c -o mert-Data.o `test -f 'Data.cpp' || echo '$(srcdir)/'`Data.cpp
	$(am__mv) $(DEPDIR)/mert-Data.Tpo $(DEPDIR)/mert-Data.Po
#	source='Data.cpp' object='mert-Data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Data.o `test -f 'Data.cpp' || echo '$(srcdir)/'`Data.cpp

mert-Data.obj: Data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Data.obj -MD -MP -MF $(DEPDIR)/mert-Data.Tpo -c -o mert-Data.obj `if test -f 'Data.cpp'; then $(CYGPATH_W) 'Data.cpp'; else $(CYGPATH_W) '$(srcdir)/Data.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Data.Tpo $(DEPDIR)/mert-Data.Po
#	source='Data.cpp' object='mert-Data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Data.obj `if test -f 'Data.cpp'; then $(CYGPATH_W) 'Data.cpp'; else $(CYGPATH_W) '$(srcdir)/Data.cpp'; fi`

mert-BleuScorer.o: BleuScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-BleuScorer.o -MD -MP -MF $(DEPDIR)/mert-BleuScorer.Tpo -c -o mert-BleuScorer.o `test -f 'BleuScorer.cpp' || echo '$(srcdir)/'`BleuScorer.cpp
	$(am__mv) $(DEPDIR)/mert-BleuScorer.Tpo $(DEPDIR)/mert-BleuScorer.Po
#	source='BleuScorer.cpp' object='mert-BleuScorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-BleuScorer.o `test -f 'BleuScorer.cpp' || echo '$(srcdir)/'`BleuScorer.cpp

mert-BleuScorer.obj: BleuScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-BleuScorer.obj -MD -MP -MF $(DEPDIR)/mert-BleuScorer.Tpo -c -o mert-BleuScorer.obj `if test -f 'BleuScorer.cpp'; then $(CYGPATH_W) 'BleuScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/BleuScorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-BleuScorer.Tpo $(DEPDIR)/mert-BleuScorer.Po
#	source='BleuScorer.cpp' object='mert-BleuScorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-BleuScorer.obj `if test -f 'BleuScorer.cpp'; then $(CYGPATH_W) 'BleuScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/BleuScorer.cpp'; fi`

mert-Point.o: Point.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Point.o -MD -MP -MF $(DEPDIR)/mert-Point.Tpo -c -o mert-Point.o `test -f 'Point.cpp' || echo '$(srcdir)/'`Point.cpp
	$(am__mv) $(DEPDIR)/mert-Point.Tpo $(DEPDIR)/mert-Point.Po
#	source='Point.cpp' object='mert-Point.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Point.o `test -f 'Point.cpp' || echo '$(srcdir)/'`Point.cpp

mert-Point.obj: Point.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Point.obj -MD -MP -MF $(DEPDIR)/mert-Point.Tpo -c -o mert-Point.obj `if test -f 'Point.cpp'; then $(CYGPATH_W) 'Point.cpp'; else $(CYGPATH_W) '$(srcdir)/Point.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Point.Tpo $(DEPDIR)/mert-Point.Po
#	source='Point.cpp' object='mert-Point.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Point.obj `if test -f 'Point.cpp'; then $(CYGPATH_W) 'Point.cpp'; else $(CYGPATH_W) '$(srcdir)/Point.cpp'; fi`

mert-PerScorer.o: PerScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-PerScorer.o -MD -MP -MF $(DEPDIR)/mert-PerScorer.Tpo -c -o mert-PerScorer.o `test -f 'PerScorer.cpp' || echo '$(srcdir)/'`PerScorer.cpp
	$(am__mv) $(DEPDIR)/mert-PerScorer.Tpo $(DEPDIR)/mert-PerScorer.Po
#	source='PerScorer.cpp' object='mert-PerScorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-PerScorer.o `test -f 'PerScorer.cpp' || echo '$(srcdir)/'`PerScorer.cpp

mert-PerScorer.obj: PerScorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-PerScorer.obj -MD -MP -MF $(DEPDIR)/mert-PerScorer.Tpo -c -o mert-PerScorer.obj `if test -f 'PerScorer.cpp'; then $(CYGPATH_W) 'PerScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/PerScorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-PerScorer.Tpo $(DEPDIR)/mert-PerScorer.Po
#	source='PerScorer.cpp' object='mert-PerScorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-PerScorer.obj `if test -f 'PerScorer.cpp'; then $(CYGPATH_W) 'PerScorer.cpp'; else $(CYGPATH_W) '$(srcdir)/PerScorer.cpp'; fi`

mert-Scorer.o: Scorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Scorer.o -MD -MP -MF $(DEPDIR)/mert-Scorer.Tpo -c -o mert-Scorer.o `test -f 'Scorer.cpp' || echo '$(srcdir)/'`Scorer.cpp
	$(am__mv) $(DEPDIR)/mert-Scorer.Tpo $(DEPDIR)/mert-Scorer.Po
#	source='Scorer.cpp' object='mert-Scorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Scorer.o `test -f 'Scorer.cpp' || echo '$(srcdir)/'`Scorer.cpp

mert-Scorer.obj: Scorer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Scorer.obj -MD -MP -MF $(DEPDIR)/mert-Scorer.Tpo -c -o mert-Scorer.obj `if test -f 'Scorer.cpp'; then $(CYGPATH_W) 'Scorer.cpp'; else $(CYGPATH_W) '$(srcdir)/Scorer.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Scorer.Tpo $(DEPDIR)/mert-Scorer.Po
#	source='Scorer.cpp' object='mert-Scorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Scorer.obj `if test -f 'Scorer.cpp'; then $(CYGPATH_W) 'Scorer.cpp'; else $(CYGPATH_W) '$(srcdir)/Scorer.cpp'; fi`

mert-Optimizer.o: Optimizer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Optimizer.o -MD -MP -MF $(DEPDIR)/mert-Optimizer.Tpo -c -o mert-Optimizer.o `test -f 'Optimizer.cpp' || echo '$(srcdir)/'`Optimizer.cpp
	$(am__mv) $(DEPDIR)/mert-Optimizer.Tpo $(DEPDIR)/mert-Optimizer.Po
#	source='Optimizer.cpp' object='mert-Optimizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Optimizer.o `test -f 'Optimizer.cpp' || echo '$(srcdir)/'`Optimizer.cpp

mert-Optimizer.obj: Optimizer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-Optimizer.obj -MD -MP -MF $(DEPDIR)/mert-Optimizer.Tpo -c -o mert-Optimizer.obj `if test -f 'Optimizer.cpp'; then $(CYGPATH_W) 'Optimizer.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimizer.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-Optimizer.Tpo $(DEPDIR)/mert-Optimizer.Po
#	source='Optimizer.cpp' object='mert-Optimizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-Optimizer.obj `if test -f 'Optimizer.cpp'; then $(CYGPATH_W) 'Optimizer.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimizer.cpp'; fi`

mert-mert.o: mert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-mert.o -MD -MP -MF $(DEPDIR)/mert-mert.Tpo -c -o mert-mert.o `test -f 'mert.cpp' || echo '$(srcdir)/'`mert.cpp
	$(am__mv) $(DEPDIR)/mert-mert.Tpo $(DEPDIR)/mert-mert.Po
#	source='mert.cpp' object='mert-mert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-mert.o `test -f 'mert.cpp' || echo '$(srcdir)/'`mert.cpp

mert-mert.obj: mert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mert-mert.obj -MD -MP -MF $(DEPDIR)/mert-mert.Tpo -c -o mert-mert.obj `if test -f 'mert.cpp'; then $(CYGPATH_W) 'mert.cpp'; else $(CYGPATH_W) '$(srcdir)/mert.cpp'; fi`
	$(am__mv) $(DEPDIR)/mert-mert.Tpo $(DEPDIR)/mert-mert.Po
#	source='mert.cpp' object='mert-mert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(mert_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mert-mert.obj `if test -f 'mert.cpp'; then $(CYGPATH_W) 'mert.cpp'; else $(CYGPATH_W) '$(srcdir)/mert.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
